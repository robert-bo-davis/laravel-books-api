<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

use App\Author;
use App\Book;
use App\Edition;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    /**
     * Our faker object
     *
     * @var \Faker\Generator
     */
    protected $faker;

    /**
     * Our reusable author object
     *
     * @var App\Author
     */
    protected $author;

    /**
     * Our reusable book object
     *
     * @var App\Book
     */
    protected $book;

    /**
     * Setup our reusable variables
     *
     * @return void
     */
    public function setUp()
    {
        parent::setUp();

        $this->faker = \Faker\Factory::create();
    }

    /**
     * Tear down our reusable variables
     *
     * @return void
     */
    public function tearDown()
    {
        parent::tearDown();

        if ($this->author instanceof Author) {
            $this->author->delete();
        }

        if ($this->book instanceof Book) {
            $this->book->delete();
        }
    }

    /**
     * Get structure for reusable author
     *
     * @return array
     */
    public function getAuthorArray()
    {
        return [
            'type'        => 'author',
            'id'          => $this->author->id,
            'first_name'  => $this->author->first_name,
            'middle_name' => $this->author->middle_name,
            'last_name'   => $this->author->last_name,
            'birth_year'  => $this->author->birth_year,
            'death_year'  => $this->author->death_year,
        ];
    }

    /**
     * Get structure for reusable book
     *
     * @return array
     */
    public function getBookArray()
    {
        return [
            'type'     => 'book',
            'id'       => $this->book->id,
            'title'    => $this->book->title,
            'subtitle' => $this->book->subtitle,
            'author'   => $this->getAuthorArray(),
        ];
    }

    /**
     * Represents the base structure of an author.
     *
     * @var array
     */
    protected $author_structure = [
        'type',
        'id',
        'first_name',
        'middle_name',
        'last_name',
        'birth_year',
        'death_year',
    ];

    /**
     * Generates author array using faker
     *
     * @return array valid author array generated by faker
     */
    protected function fakeAuthorArray()
    {
        return [
            'first_name'  => $this->faker->firstName,
            'middle_name' => $this->faker->firstName,
            'last_name'   => $this->faker->lastName,
            'birth_year'  => $this->faker->year,
            'death_year'  => $this->faker->year,
        ];
    }

    /**
     * Represents the base structure of a book.
     *
     * @var array
     */
    protected $book_structure = [
        'type',
        'id',
        'title',
        'author'   => [],
        'editions' => [],
    ];

    /**
     * Generates book array using faker
     *
     * @param \App\Author $author
     *
     * @return array valid book array generated by faker
     */
    protected function fakeBookArray(Author $author)
    {
        return [
            'title'     => $this->faker->sentence,
            'subtitle'  => $this->faker->sentence,
            'author_id' => $author->id,
        ];
    }

    /**
     * Represents the base structure of an edition.
     *
     * @var array
     */
    protected $edition_structure = [
        'type',
        'id',
        'number',
        'title',
        'isbn',
        'book' => [
            'author' => [],
        ],
    ];

    /**
     * Generates edition array using faker
     *
     * @param \App\Book $book
     *
     * @return array valid book array generated by faker
     */
    protected function fakeEditionArray(Book $book)
    {
        return [
            'number'  => $this->faker->numberBetween(1, 25),
            'title'   => $this->faker->sentence,
            // mt_getrandmax is 10
            'isbn'    => '00123456' . $this->faker->randomNumber(5, true),
            'book_id' => $book->id,
        ];
    }
}
